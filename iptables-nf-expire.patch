 .expire-test       |    3 
 .expire-test6      |    3 
 libip6t_expire.c   |  170 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 libip6t_expire.man |    5 +
 libipt_expire.c    |  170 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 libipt_expire.man  |    5 +
 6 files changed, 356 insertions(+)

diff -Nur --exclude '*.orig' iptables.org/extensions/.expire-test iptables/extensions/.expire-test
--- iptables.org/extensions/.expire-test	1970-01-01 01:00:00.000000000 +0100
+++ iptables/extensions/.expire-test	2005-10-28 13:38:37.000000000 +0200
@@ -0,0 +1,3 @@
+#!/bin/sh
+
+[ -f $KERNEL_DIR/include/linux/netfilter_ipv4/ipt_expire.h ] && echo expire
diff -Nur --exclude '*.orig' iptables.org/extensions/.expire-test6 iptables/extensions/.expire-test6
--- iptables.org/extensions/.expire-test6	1970-01-01 01:00:00.000000000 +0100
+++ iptables/extensions/.expire-test6	2005-10-28 13:38:37.000000000 +0200
@@ -0,0 +1,3 @@
+#!/bin/sh
+
+[ -f $KERNEL_DIR/include/linux/netfilter_ipv6/ip6t_expire.h ] && echo expire
diff -Nur --exclude '*.orig' iptables.org/extensions/libip6t_expire.c iptables/extensions/libip6t_expire.c
--- iptables.org/extensions/libip6t_expire.c	1970-01-01 01:00:00.000000000 +0100
+++ iptables/extensions/libip6t_expire.c	2005-10-28 13:38:37.000000000 +0200
@@ -0,0 +1,170 @@
+/* This library manipulates expiring firewall rules
+ *
+ * This library is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this library; if not, write to:
+ *      The Free Software Foundation, Inc.
+ *      59 Temple Place, Suite 330
+ *      Boston, MA  02111-1307  USA
+ *
+ * Copyright © 2005 Bryan Cardillo <dillo@seas.upenn.edu>
+ */
+
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+#include <getopt.h>
+#include <time.h>
+
+#include <ip6tables.h>
+#include <linux/netfilter_ipv6/ip6t_expire.h>
+
+static void ip6t_exp_help(void);
+static int ip6t_exp_parse(int, char **, int, unsigned int *,
+		const struct ip6t_entry *, unsigned int *,
+		struct ip6t_entry_match **);
+static void ip6t_exp_final_check(unsigned int);
+static void ip6t_exp_print(const struct ip6t_ip *,
+		const struct ip6t_entry_match *, int);
+static void ip6t_exp_save(const struct ip6t_ip *, const struct ip6t_entry_match *);
+
+/**
+ * options
+ */
+static struct option ip6t_exp_opts[] = {
+	{ "expiration", 1, 0, 'e' },
+	{ 0 }
+};
+
+/**
+ * match
+ */
+static struct iptables_match ip6t_expire_match = {
+	.next = NULL,
+	.name = "expire",
+	.version = IPTABLES_VERSION,
+	.size = IP6T_ALIGN(sizeof(struct ip6t_exp_info)),
+	.userspacesize = IP6T_ALIGN(sizeof(struct ip6t_exp_info)),
+	.help = &ip6t_exp_help,
+	.parse = &ip6t_exp_parse,
+	.final_check = &ip6t_exp_final_check,
+	.print = &ip6t_exp_print,
+	.save = &ip6t_exp_save,
+	.extra_opts = ip6t_exp_opts
+};
+
+/**
+ * shared library initialization
+ * @see register_match()
+ */
+void
+_init(void)
+{
+	register_match(&ip6t_expire_match);
+}
+
+/**
+ * print usage information
+ */
+static void
+ip6t_exp_help(void)
+{
+    printf("EXPIRE match options\n"
+           "  --expiration [+]TIME\t\t"
+	   "rule expires at [in] TIME\n\n");
+}
+
+/**
+ * parse module specific options
+ * @param c the short option character
+ * @param argv the arguments array
+ * @param invert is this an inverted argument
+ * @param flags module specific flags
+ * @param entry the entry
+ * @param nfcache netfilter cache flags
+ * @param match the match
+ * @return zero if an option was found, non-zero otherwise
+ */
+static int
+ip6t_exp_parse(int c, char **argv, int invert, unsigned int *flags,
+	const struct ip6t_entry *entry, unsigned int *nfcache,
+	struct ip6t_entry_match **match)
+{
+	char *arg;
+	struct ip6t_exp_info *info;
+	
+	info = (struct ip6t_exp_info *)(*match)->data;
+	info->expiration = 0;
+	switch (c) {
+		case 'e':
+			arg = argv[optind-1];
+			check_inverse(arg, &invert, &optind, 0);
+			if (invert)
+				exit_error(PARAMETER_PROBLEM,
+					"--expiration cannot be inverted");
+                        if (*arg == '+')
+				arg++;
+			if (string_to_number_l(
+					arg, 1, 0, &info->expiration) < 0)
+				exit_error(PARAMETER_PROBLEM,
+					"invalid expiration time");
+			*flags = 1;
+			if (*argv[optind-1] == '+')
+				info->expiration += time(NULL);
+			break;
+		default:
+			return 0;
+	}
+	return 1;
+}
+
+/**
+ * ensures an expiration was specified
+ * @param flags module specific flags from options parsing
+ */
+static void
+ip6t_exp_final_check(unsigned int flags)
+{
+	if (flags != 1)
+		exit_error(PARAMETER_PROBLEM,
+			"you must specify an expiration time (--expiration)");
+}
+
+/**
+ * print information about an expiring match
+ * in a format suitable for viewing
+ * @param ip the address information
+ * @param match the match
+ * @param numeric the verbose level (?)
+ */
+static void
+ip6t_exp_print(const struct ip6t_ip *ip,
+	const struct ip6t_entry_match *match, int numeric)
+{
+	struct ip6t_exp_info *info;
+	info = (struct ip6t_exp_info *)match->data;
+	printf("expires in %lds ", info->expiration - time(NULL));
+}
+
+/**
+ * print information about an expiring match
+ * in a format suitable for reconstructing the match
+ * @param ip the address information
+ * @param match the match
+ */
+static void
+ip6t_exp_save(const struct ip6t_ip *ip, const struct ip6t_entry_match *match)
+{
+	struct ip6t_exp_info *info;
+	info = (struct ip6t_exp_info *)match->data;
+	printf("-m expire --expiration %ld ", info->expiration);
+}
diff -Nur --exclude '*.orig' iptables.org/extensions/libip6t_expire.man iptables/extensions/libip6t_expire.man
--- iptables.org/extensions/libip6t_expire.man	1970-01-01 01:00:00.000000000 +0100
+++ iptables/extensions/libip6t_expire.man	2005-10-28 13:38:37.000000000 +0200
@@ -0,0 +1,5 @@
+This module matches until its expiration time.
+.TP
+.BI "--expiration " "[\fItime\fP]"
+Match against the other rule criteria until the expiration time.  After
+the expiration time, the entire rule will be removed from the table.
diff -Nur --exclude '*.orig' iptables.org/extensions/libipt_expire.c iptables/extensions/libipt_expire.c
--- iptables.org/extensions/libipt_expire.c	1970-01-01 01:00:00.000000000 +0100
+++ iptables/extensions/libipt_expire.c	2005-10-28 13:38:37.000000000 +0200
@@ -0,0 +1,170 @@
+/* This library manipulates expiring firewall rules
+ *
+ * This library is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this library; if not, write to:
+ *      The Free Software Foundation, Inc.
+ *      59 Temple Place, Suite 330
+ *      Boston, MA  02111-1307  USA
+ *
+ * Copyright © 2005 Bryan Cardillo <dillo@seas.upenn.edu>
+ */
+
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+#include <getopt.h>
+#include <time.h>
+
+#include <iptables.h>
+#include <linux/netfilter_ipv4/ipt_expire.h>
+
+static void ipt_exp_help(void);
+static int ipt_exp_parse(int, char **, int, unsigned int *,
+		const struct ipt_entry *, unsigned int *,
+		struct ipt_entry_match **);
+static void ipt_exp_final_check(unsigned int);
+static void ipt_exp_print(const struct ipt_ip *,
+		const struct ipt_entry_match *, int);
+static void ipt_exp_save(const struct ipt_ip *, const struct ipt_entry_match *);
+
+/**
+ * options
+ */
+static struct option ipt_exp_opts[] = {
+	{ "expiration", 1, 0, 'e' },
+	{ 0 }
+};
+
+/**
+ * match
+ */
+static struct iptables_match ipt_expire_match = {
+	.next = NULL,
+	.name = "expire",
+	.version = IPTABLES_VERSION,
+	.size = IPT_ALIGN(sizeof(struct ipt_exp_info)),
+	.userspacesize = IPT_ALIGN(sizeof(struct ipt_exp_info)),
+	.help = &ipt_exp_help,
+	.parse = &ipt_exp_parse,
+	.final_check = &ipt_exp_final_check,
+	.print = &ipt_exp_print,
+	.save = &ipt_exp_save,
+	.extra_opts = ipt_exp_opts
+};
+
+/**
+ * shared library initialization
+ * @see register_match()
+ */
+void
+_init(void)
+{
+	register_match(&ipt_expire_match);
+}
+
+/**
+ * print usage information
+ */
+static void
+ipt_exp_help(void)
+{
+    printf("EXPIRE match options\n"
+           "  --expiration [+]TIME\t\t"
+	   "rule expires at [in] TIME\n\n");
+}
+
+/**
+ * parse module specific options
+ * @param c the short option character
+ * @param argv the arguments array
+ * @param invert is this an inverted argument
+ * @param flags module specific flags
+ * @param entry the entry
+ * @param nfcache netfilter cache flags
+ * @param match the match
+ * @return zero if an option was found, non-zero otherwise
+ */
+static int
+ipt_exp_parse(int c, char **argv, int invert, unsigned int *flags,
+	const struct ipt_entry *entry, unsigned int *nfcache,
+	struct ipt_entry_match **match)
+{
+	char *arg;
+	struct ipt_exp_info *info;
+	
+	info = (struct ipt_exp_info *)(*match)->data;
+	info->expiration = 0;
+	switch (c) {
+		case 'e':
+			arg = argv[optind-1];
+			check_inverse(arg, &invert, &optind, 0);
+			if (invert)
+				exit_error(PARAMETER_PROBLEM,
+					"--expiration cannot be inverted");
+                        if (*arg == '+')
+				arg++;
+			if (string_to_number_l(
+					arg, 1, 0, &info->expiration) < 0)
+				exit_error(PARAMETER_PROBLEM,
+					"invalid expiration time");
+			*flags = 1;
+			if (*argv[optind-1] == '+')
+				info->expiration += time(NULL);
+			break;
+		default:
+			return 0;
+	}
+	return 1;
+}
+
+/**
+ * ensures an expiration was specified
+ * @param flags module specific flags from options parsing
+ */
+static void
+ipt_exp_final_check(unsigned int flags)
+{
+	if (flags != 1)
+		exit_error(PARAMETER_PROBLEM,
+			"you must specify an expiration time (--expiration)");
+}
+
+/**
+ * print information about an expiring match
+ * in a format suitable for viewing
+ * @param ip the address information
+ * @param match the match
+ * @param numeric the verbose level (?)
+ */
+static void
+ipt_exp_print(const struct ipt_ip *ip,
+	const struct ipt_entry_match *match, int numeric)
+{
+	struct ipt_exp_info *info;
+	info = (struct ipt_exp_info *)match->data;
+	printf("expires in %lds ", info->expiration - time(NULL));
+}
+
+/**
+ * print information about an expiring match
+ * in a format suitable for reconstructing the match
+ * @param ip the address information
+ * @param match the match
+ */
+static void
+ipt_exp_save(const struct ipt_ip *ip, const struct ipt_entry_match *match)
+{
+	struct ipt_exp_info *info;
+	info = (struct ipt_exp_info *)match->data;
+	printf("-m expire --expiration %ld ", info->expiration);
+}
diff -Nur --exclude '*.orig' iptables.org/extensions/libipt_expire.man iptables/extensions/libipt_expire.man
--- iptables.org/extensions/libipt_expire.man	1970-01-01 01:00:00.000000000 +0100
+++ iptables/extensions/libipt_expire.man	2005-10-28 13:38:37.000000000 +0200
@@ -0,0 +1,5 @@
+This module matches until its expiration time.
+.TP
+.BI "--expiration " "[\fItime\fP]"
+Match against the other rule criteria until the expiration time.  After
+the expiration time, the entire rule will be removed from the table.
