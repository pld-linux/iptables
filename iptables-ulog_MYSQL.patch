diff -urN iptables-1.1.1/netfilter_ULOG-0.3/ulogd/Makefile iptables-1.1.1.mysql/netfilter_ULOG-0.3/ulogd/Makefile
--- iptables-1.1.1/netfilter_ULOG-0.3/ulogd/Makefile	Wed Aug 16 17:44:55 2000
+++ iptables-1.1.1.mysql/netfilter_ULOG-0.3/ulogd/Makefile	Wed Aug 16 17:18:11 2000
@@ -13,7 +13,11 @@
 
 SHARED_LIBS+=$(foreach T,$(ULOGD_SL),extensions/ulogd_$(T).so)
 
-all: $(SHARED_LIBS) ulogd
+all: $(SHARED_LIBS) extensions/ulogd_MYSQL.so ulogd
+
+extensions/ulogd_MYSQL.so: extensions/ulogd_MYSQL.c
+	gcc $(SH_CFLAGS) -o extensions/ulogd_MYSQL_sh.o -c $<
+	ld -shared -lmysqlclient -o $@ extensions/ulogd_MYSQL_sh.o
 
 $(SHARED_LIBS): %.so: %_sh.o
 	ld -shared -o $@ $<
diff -urN iptables-1.1.1/netfilter_ULOG-0.3/ulogd/extensions/ulogd_MYSQL.c iptables-1.1.1.mysql/netfilter_ULOG-0.3/ulogd/extensions/ulogd_MYSQL.c
--- iptables-1.1.1/netfilter_ULOG-0.3/ulogd/extensions/ulogd_MYSQL.c	Thu Jan  1 01:00:00 1970
+++ iptables-1.1.1.mysql/netfilter_ULOG-0.3/ulogd/extensions/ulogd_MYSQL.c	Wed Aug 16 17:40:46 2000
@@ -0,0 +1,215 @@
+/*
+ * ulogd_MYSQL.c, Version $Revision$
+ *
+ * ulogd logging interpreter for MySql.
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <time.h>
+#include <ulogd.h>
+#include <linux/ip.h>
+#include <linux/in.h>
+#include <linux/tcp.h>
+#include <linux/udp.h>
+#include <linux/icmp.h>
+#include <mysql/mysql.h>
+
+#define NIPQUAD(addr) \
+	((unsigned char *)&addr)[0], \
+	((unsigned char *)&addr)[1], \
+	((unsigned char *)&addr)[2], \
+	((unsigned char *)&addr)[3]
+
+#define HIPQUAD(addr) \
+	((unsigned char *)&addr)[3], \
+	((unsigned char *)&addr)[2], \
+	((unsigned char *)&addr)[1], \
+	((unsigned char *)&addr)[0]
+
+static MYSQL *sql = NULL;
+static int plugin_sql_query(char *query);
+
+ulog_iret_t *_interp_mysql(ulog_packet_msg_t *pkt)
+{
+	struct iphdr *iph = (struct iphdr *) pkt->payload;
+	void *protoh = (u_int32_t *)iph + iph->ihl;
+	ulog_iret_t *ret;
+	char *buf;
+	char *bufptr, timestr[20];
+	struct tm *tstamp = NULL;
+	int i;
+
+	if (pkt == NULL)
+		return NULL;
+
+	buf = (char *)malloc(512);
+	if (buf == NULL)
+		return NULL;
+
+	*buf = 0;
+	bufptr = buf;
+
+	if (pkt->timestamp_sec)
+		tstamp = localtime(&(pkt->timestamp_sec));
+
+	if (tstamp != NULL)
+		strftime(timestr, 18, "'%Y%m%d%H%M%S'", tstamp);
+	else
+		strcpy(timestr, "NULL");
+	bufptr += sprintf(buf,"INSERT INTO firewall SET "
+				"tstamp=%s,tstampu='%lu',prefix='%s',"
+				"indev='%s',outdev='%s',"
+				"source='%u.%u.%u.%u',dest='%u.%u.%u.%u',"
+				"len='%u',tos='%u',ttl='%u'",
+			timestr, pkt->timestamp_usec, pkt->prefix,
+			pkt->indev_name, pkt->outdev_name,
+			NIPQUAD(iph->saddr), NIPQUAD(iph->daddr),
+			ntohs(iph->tot_len), ntohs(iph->tos), iph->ttl);
+	if (ntohs(iph->frag_off) & 0xE000) {
+		bufptr += sprintf(bufptr, ",ipflags='");
+		i = 0;
+		if (ntohs(iph->frag_off) & 0x8000) {	/* Flag: "Congestion"     */
+			bufptr += sprintf(bufptr, "CE"); i=1;
+		}
+		if (ntohs(iph->frag_off) & 0x4000) {	/* Flag: "Don't Fragment" */
+			bufptr += sprintf(bufptr, i ? ",DF" : "DF"); i=1;
+		}
+		if (ntohs(iph->frag_off) & 0x2000)	/* Flag: "More Fragments" */
+			bufptr += sprintf(bufptr, i ? ",MF" : "MF");
+		bufptr += sprintf(bufptr, "'");
+	}
+	/* "Fragment Offset" part */
+	if (ntohs(iph->frag_off) & 0x1FFF)
+		bufptr += sprintf(bufptr,",frag='%u'", ntohs(iph->frag_off) & 0x1FFF);
+	bufptr += sprintf(bufptr,",proto='%u'", iph->protocol);
+	switch (iph->protocol) {
+		case IPPROTO_TCP: {
+			struct tcphdr *tcph = protoh;
+
+			bufptr += sprintf(bufptr, ",protoname='TCP',sport='%u',dport='%u',tcpflags='",
+					ntohs(tcph->source), ntohs(tcph->dest));
+			i = 0;
+			if (tcph->urg) {
+				bufptr += sprintf(bufptr, i ? ",URG" : "URG"); i=1;
+			}                                          
+			if (tcph->ack) {                           
+				bufptr += sprintf(bufptr, i ? ",ACK" : "ACK"); i=1;
+			}                                          
+			if (tcph->psh) {                           
+				bufptr += sprintf(bufptr, i ? ",PSH" : "PSH"); i=1;
+			}                                          
+			if (tcph->rst) {                           
+				bufptr += sprintf(bufptr, i ? ",RST" : "RST"); i=1;
+			}                                          
+			if (tcph->syn) {                           
+				bufptr += sprintf(bufptr, i ? ",SYN" : "SYN"); i=1;
+			}                                          
+			if (tcph->fin)                             
+				bufptr += sprintf(bufptr, i ? ",FIN" : "FIN");
+			strcat(buf, "';");
+			break;
+		}
+		case IPPROTO_UDP: {
+			struct udphdr *udph = protoh;
+
+			sprintf(bufptr, ",protoname='UDP',sport='%u',dport='%u',udplength='%u';",
+					ntohs(udph->source),
+					ntohs(udph->dest),
+					ntohs(udph->len));
+			break;
+		}
+		case IPPROTO_ICMP: {
+			struct icmphdr *icmph = protoh;
+
+			bufptr += sprintf(bufptr, ",protoname='ICMP',icmptype='%u',icmpcode='%u'",
+					icmph->type, icmph->code);
+			if (icmph->type == ICMP_REDIRECT)
+				bufptr += sprintf(bufptr, ",icmpgateway='%u.%u.%u.%u'", NIPQUAD(icmph->un.gateway));
+			else if (icmph->type == ICMP_DEST_UNREACH
+					&& icmph->code == ICMP_FRAG_NEEDED)
+				bufptr += sprintf(bufptr, "icmpmtu='%u'", ntohs(icmph->un.frag.mtu));
+			sprintf(bufptr, ";");
+			break;
+		}
+		default:
+			sprintf(bufptr, ";");
+			break;
+	}
+
+	ret = alloc_ret(ULOGD_RET_STRING,"mysql.insert.query");
+	ret->value.ptr = buf;
+	return ret;
+}
+
+int *_output_mysql(ulog_iret_t *res)
+{
+	ulog_iret_t *ret;
+
+	if ((sql == NULL) && !plugin_mysql_open("localhost", "root", "", "logs")) {
+		ulogd_error("ulogd_MYSQL: can't open database\n");
+	} else {
+		for (ret = res; ret; ret = ret->next)
+		{
+			if (strcmp(ret->key,"mysql.insert.query") == 0) {
+				plugin_sql_query((char *) ret->value.ptr);
+			}
+		}
+	}
+	return 0;
+}
+
+/* Opens the SQL-connection */
+/* Select database to use */
+static int plugin_mysql_open(char *server, char *user, char *pass,
+			     char *db)
+{
+	if (db == NULL || server == NULL)
+		return 0;
+
+	if (sql != NULL)
+		return 1;
+
+	sql = mysql_connect(NULL, server, user, pass);
+	if (sql != NULL)
+		return (mysql_select_db(sql, db) != -1);
+	else
+		return 0;
+
+	return 1;
+}
+
+/* Closes the SQL-connection */
+/*
+static void plugin_mysql_close(void)
+{
+	if (sql != NULL)
+		mysql_close(sql);
+}
+*/
+/* Makes an SQL-query. Returns the SQL-result set (NULL = Error). */
+static int plugin_sql_query(char *query)
+{
+	if (query == NULL || sql == NULL)
+		return 0;
+
+/* Make the query */
+	if (mysql_query(sql, query) == -1)
+		return 0;
+
+	return 1;
+}
+
+static ulog_interpreter_t mysql_ip = { NULL, "mysql.query", &_interp_mysql };
+static ulog_output_t mysql_op = { NULL, "mysql.insert", &_output_mysql };
+
+void _init(void)
+{
+	if (!plugin_mysql_open("localhost", "root", "", "logs")) {
+		ulogd_error("ulogd_MYSQL: can't open database\n");
+	}		
+
+	register_interpreter(&mysql_ip);
+	register_output(&mysql_op);
+}
diff -urN iptables-1.1.1/netfilter_ULOG-0.3/ulogd_MYSQL.sql iptables-1.1.1.mysql/netfilter_ULOG-0.3/ulogd_MYSQL.sql
--- iptables-1.1.1/netfilter_ULOG-0.3/ulogd_MYSQL.sql	Thu Jan  1 01:00:00 1970
+++ iptables-1.1.1.mysql/netfilter_ULOG-0.3/ulogd_MYSQL.sql	Wed Aug 16 17:40:46 2000
@@ -0,0 +1,36 @@
+# INSERT INTO 0123456789ABCDEF VALUES ('123456789ABCDE','0123456789','0123456789ABCDEF0123456789ABCDEF','0123456789ABCDEF','0123456789ABCDEF','0123456789ABCDEF','0123456789ABCDEF','65535','255','255','CE DF MF','65535','255','12345678','65535','65535','URG ACK PSH RST SYN FIN','65535','255','255','0123456789ABCDEF','65535');
+CREATE TABLE firewall (
+tstamp		timestamp,
+tstampu		int unsigned		DEFAULT '0',
+prefix		varchar(32)		DEFAULT '' NOT NULL,
+indev		varchar(16)		DEFAULT '' NOT NULL,
+outdev		varchar(16)		DEFAULT '' NOT NULL,
+source		char(16)		DEFAULT '' NOT NULL,
+dest		char(16)		DEFAULT '' NOT NULL,
+len		int			DEFAULT '0' NOT NULL,
+tos		tinyint unsigned	DEFAULT '0' NOT NULL,
+ttl		tinyint unsigned	DEFAULT '0' NOT NULL,
+ipflags		set('CE','DF','MF')	DEFAULT NULL,
+frag		int			DEFAULT '0' NOT NULL,
+proto		int			DEFAULT '0' NOT NULL,
+protoname	char(8)			DEFAULT NULL,
+
+sport		int			DEFAULT '0' NOT NULL,
+dport		int			DEFAULT '0' NOT NULL,
+tcpflags	set('URG', 'ACK', 'PSH', 'RST', 'SYN', 'FIN')	DEFAULT NULL,
+udplength	int			DEFAULT NULL,
+icmptype	tinyint unsigned	DEFAULT '' NOT NULL,
+icmpcode	tinyint unsigned	DEFAULT NULL,
+icmpgateway	char(16)		DEFAULT NULL,
+icmpmtu		int			DEFAULT NULL,
+
+KEY	prefix		(prefix),
+KEY	indev		(indev),
+KEY	outdev		(outdev),
+KEY	source		(source),
+KEY	dest		(dest),
+KEY	proto		(proto),
+KEY	sport		(sport),
+KEY	dport		(dport),
+KEY	icmptype	(icmptype)
+);
